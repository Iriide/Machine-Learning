# -*- coding: utf-8 -*-
"""lab10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aF5JEpabIXNlzzccyITa8MqIX7aJodxc
"""

import tensorflow as tf
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Flatten, Dense
import os
import time
from keras.callbacks import TensorBoard, EarlyStopping
import numpy as np
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

"""1. Import data"""

fashion_mnist = tf.keras.datasets.fashion_mnist
(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()

assert X_train.shape == (60000,28,28)
assert X_test.shape == (10000,28,28)
assert y_train.shape == (60000,)
assert y_test.shape == (10000,)

X_train = X_train / 225.0
y_train = y_train / 225.0

plt.imshow(X_train[142], cmap="binary")
plt.axis('off')
plt.show()

class_names=["koszulka","spodnie","pulower","sukienka","kurtka","sanda≈Ç","koszula","but","torba","kozak"]

"""2. Create model"""

model = Sequential()

model.add(Flatten(input_shape=(28, 28)))
model.add(Dense(300, activation='relu'))
model.add(Dense(100, activation='relu'))
model.add(Dense(10, activation='softmax'))

model.summary()
tf.keras.utils.plot_model(model,"fashion_mnist.png", show_shapes=True)

model.compile(loss='sparse_categorical_crossentropy',
              optimizer='sgd',
              metrics=['accuracy'])

log_dir = os.path.join("image_logs", time.strftime("%Y%m%d-%H%M%S"))
tensorboard_callback = TensorBoard(log_dir=log_dir, histogram_freq=1)

model.fit(X_train, y_train, epochs=20,
                validation_split=0.1,
                callbacks=[tensorboard_callback])

image_index=np.random.randint(len(X_test))
image=np.array([X_test[image_index]])
confidences=model.predict(image)
confidence=np.max(confidences[0])
prediction=np.argmax(confidences[0])
print("Prediction:", class_names[prediction])
print("Confidence:", confidence)
print("Truth:", class_names[y_test[image_index]])
plt.imshow(image[0], cmap="binary")
plt.axis('off')
plt.show()

model.save('fashion_clf.h5')

"""3. Regression"""

housing = fetch_california_housing(as_frame=True)
X_train_full, X_test, y_train_full, y_test = train_test_split(housing.data, housing.target, test_size=0.2)

X_train, X_valid, y_train, y_valid = train_test_split(X_train_full, y_train_full, test_size=0.2)

scaler = StandardScaler()


X_train = scaler.fit_transform(X_train)
X_valid = scaler.transform(X_valid)
X_test = scaler.transform(X_test)

model_housing = Sequential()

model_housing.add(Dense(30, activation='relu'))
model_housing.add(Dense(1))

model_housing.compile(loss='mean_squared_error',
              optimizer='sgd')

early_stopping_callback = EarlyStopping(patience=5, min_delta=0.01, verbose=1)

log_dir = os.path.join("housing_logs", time.strftime("%Y%m%d-%H%M%S"))
tensorboard_callback = TensorBoard(log_dir=log_dir, histogram_freq=1)

model_housing.fit(X_train, y_train, epochs=30, callbacks=[early_stopping_callback, tensorboard_callback], validation_data=(X_valid, y_valid))

model_housing.save('reg_housing_1.h5')

test_loss = model_housing.evaluate(X_test, y_test)
print(test_loss)

model_housing2 = Sequential()

model_housing2.add(Dense(50, activation='relu'))
model_housing2.add(Dense(30, activation='relu'))
model_housing2.add(Dense(1))

model_housing2.compile(loss='mean_squared_error',
              optimizer='sgd')

early_stopping_callback = EarlyStopping(patience=5, min_delta=0.01, verbose=1)

log_dir = os.path.join("housing_logs", time.strftime("%Y%m%d-%H%M%S"))
tensorboard_callback = TensorBoard(log_dir=log_dir, histogram_freq=1)

model_housing2.fit(X_train, y_train, epochs=30, callbacks=[early_stopping_callback, tensorboard_callback], validation_data=(X_valid, y_valid))

model_housing2.save('reg_housing_2.h5')

test_loss = model_housing2.evaluate(X_test, y_test)
print(test_loss)

model_housing3 = Sequential()

model_housing3.add(Dense(60, activation='relu', input_shape=(X_train.shape[1],)))
model_housing3.add(Dense(40, activation='relu'))
model_housing3.add(Dense(20, activation='relu'))

model_housing3.compile(loss='mean_squared_error',
              optimizer='sgd')

log_dir = os.path.join("housing_logs", time.strftime("%Y%m%d-%H%M%S"))
tensorboard_callback = TensorBoard(log_dir=log_dir, histogram_freq=1)

model_housing3.fit(X_train, y_train, epochs=30, callbacks=[early_stopping_callback, tensorboard_callback], validation_data=(X_valid, y_valid))

model_housing3.save('reg_housing_3.h5')

test_loss = model_housing3.evaluate(X_test, y_test)
print(test_loss)