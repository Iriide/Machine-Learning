# -*- coding: utf-8 -*-
"""lab06.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ZMZBHywNPuX3jTMwtr8Txdmsy8z3JUb
"""

from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import VotingClassifier
import pickle
from sklearn.ensemble import BaggingClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import GradientBoostingClassifier

"""1. Przygotowanie danych"""

data = datasets.load_breast_cancer(as_frame=True)
X_train, X_test, y_train, y_test = train_test_split(data['data'][['mean texture', 'mean symmetry']], data["target"], test_size=0.2)

"""2. Ensemble klasyfikator√≥w binarncyh"""

log_clf = LogisticRegression()
log_clf.fit(X_train, y_train)
tree_clf = DecisionTreeClassifier()
tree_clf.fit(X_train, y_train)
knc_clf = KNeighborsClassifier()
knc_clf.fit(X_train, y_train)

voting_clf_hard = VotingClassifier(estimators=[('lr', log_clf), ('dtc', tree_clf), ('knc', knc_clf)], voting='hard')
voting_clf_hard.fit(X_train, y_train)

voting_clf_soft = VotingClassifier(estimators=[('lr', log_clf), ('dtc', tree_clf), ('knc', knc_clf)], voting='soft')
voting_clf_soft.fit(X_train, y_train)

accuracy = []
accuracy.append((log_clf.score(X_train, y_train), log_clf.score(X_test, y_test)))
accuracy.append((tree_clf.score(X_train, y_train), tree_clf.score(X_test, y_test)))
accuracy.append((knc_clf.score(X_train, y_train), knc_clf.score(X_test, y_test)))
accuracy.append((voting_clf_hard.score(X_train, y_train), voting_clf_hard.score(X_test, y_test)))
accuracy.append((voting_clf_soft.score(X_train, y_train), voting_clf_soft.score(X_test, y_test)))

with open("acc_vote.pkl", 'wb') as f:
    pickle.dump(accuracy, f)

classifiers = [log_clf, tree_clf, knc_clf, voting_clf_hard, voting_clf_soft]

with open("vote.pkl", 'wb') as f:
    pickle.dump(classifiers, f)

"""3. Bagging i Pasting"""

bag_clf = BaggingClassifier(DecisionTreeClassifier(), n_estimators=30, bootstrap=True)
bag_clf.fit(X_train, y_train)

bag_clf_50 = BaggingClassifier(DecisionTreeClassifier(), n_estimators=30, bootstrap=True, max_samples=0.5)
bag_clf_50.fit(X_train, y_train)

pas_clf = BaggingClassifier(DecisionTreeClassifier(), n_estimators=30, bootstrap=False)
pas_clf.fit(X_train, y_train)

pas_clf_50 = BaggingClassifier(DecisionTreeClassifier(), n_estimators=30, bootstrap=False, max_samples=0.5)
pas_clf_50.fit(X_train, y_train)

rtf_clf = RandomForestClassifier(n_estimators=30)
rtf_clf.fit(X_train, y_train)

ada_clf = AdaBoostClassifier(n_estimators=30)
ada_clf.fit(X_train, y_train)

gbc_clf = GradientBoostingClassifier(n_estimators=30)
gbc_clf.fit(X_train, y_train)

accuracy = []
accuracy.append((bag_clf.score(X_train, y_train), bag_clf.score(X_test, y_test)))
accuracy.append((bag_clf_50.score(X_train, y_train), bag_clf_50.score(X_test, y_test)))
accuracy.append((pas_clf.score(X_train, y_train), pas_clf.score(X_test, y_test)))
accuracy.append((pas_clf_50.score(X_train, y_train), pas_clf_50.score(X_test, y_test)))
accuracy.append((rtf_clf.score(X_train, y_train), rtf_clf.score(X_test, y_test)))
accuracy.append((ada_clf.score(X_train, y_train), ada_clf.score(X_test, y_test)))
accuracy.append((gbc_clf.score(X_train, y_train), gbc_clf.score(X_test, y_test)))

with open("acc_bag.pkl", 'wb') as f:
    pickle.dump(accuracy, f)

classifiers = [bag_clf, bag_clf_50, pas_clf, pas_clf_50, rtf_clf, ada_clf, gbc_clf]

with open("bag.pkl", 'wb') as f:
    pickle.dump(classifiers, f)

"""4. Sampling"""
bgc_clf = BaggingClassifier(base_estimator=DecisionTreeClassifier(), n_estimators=30, max_samples=0.5, max_features=2, bootstrap=True, bootstrap_features=True)
bgc_clf.fit(X_train, y_train)

accuracy = [bgc_clf.score(X_train, y_train), bgc_clf.score(X_test, y_test)]

with open("acc_fea.pkl", 'wb') as f:
    pickle.dump(accuracy, f)
with open("fea.pkl", 'wb') as f:
    pickle.dump([bgc_clf], f)